      pipeline {
        agent none
        tools {
          maven 'maven'
        }
        
   
        stages {
  
          stage("Source code analysis test") {
            agent any
            steps {
             withSonarQubeEnv('sonarqube') {
               sh 'mvn compile sonar:sonar -Dsonar.host.url=http://18.217.60.35:9000/ -Dsonar.sources=. -Dsonar.tests=. -Dsonar.test.inclusions=**/test/java/servlet/createpage_junit.java -Dsonar.exclusions=**/test/java/servlet/createpage_junit.java -Dsonar.login=admin -Dsonar.password=admin'
             }
            }
          }    
          
           stage("Maven build") {
             agent any
             steps {
               sh 'mvn clean install'
               }
             }
          
          
          stage("Functional Test") {
          agent any
            steps {
                   sh 'mvn -f functionaltest/pom.xml test'
                   sh "publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: '\\functionaltest\\target\\surefire-reports', reportFiles: 'index.html', reportName: 'HTML Report', reportTitles: ''])"
             }
            }
            
          
          stage("Deploy to QA") {
          agent any
            steps {
                     sh 'mvn package'
                     sh '''#!/bin/bash
                           deploy adapters: [tomcat7(credentialsId: '1e53ab8e-b030-4009-b0db-365393ca3a1a', path: '', url: 'http://18.218.133.60:8080/')], contextPath: '/QAWebapp', war: '**/*.war'
                        '''
                    
                  }
             }
           

          stage("Deploy to Artifactory"){
          agent any
              steps{

                   script{
                      def server = Artifactory.server 'artifactory'
                      def rtMaven = Artifactory.newMavenBuild()
                      rtMaven.deployer releaseRepo:'libs-release-local', snapshotRepo:'libs-snapshot-local', server: server
                      rtMaven.resolver releaseRepo:'libs-release', snapshotRepo:'libs-snapshot', server: server
                     // rtMaven.deployer.artifactDeploymentPatterns.addInclude("*.war").addExclude("*.zip")
                      //def buildInfo = rtMaven.run pom: 'pom.xml', goals: 'package'
                      server.publishBuildInfo buildInfo
                      
                  }

              }   
          }
          
        
      
             
          }
       }
